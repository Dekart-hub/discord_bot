name: Deploy Discord Bot

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t discord-bot:latest .
          docker save discord-bot:latest > /tmp/discord-bot.tar

      - name: Copy Docker image to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.PORT }}
          source: "/tmp/discord-bot.tar"
          target: "/tmp/"
          strip_components: 1

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Создаем рабочую директорию, если её нет
            mkdir -p ~/discord-bot
            cd ~/discord-bot
            
            # Клонируем/обновляем репозиторий
            if [ -d ".git" ]; then
              git pull
            else
              git clone https://github.com/${{ github.repository }}.git .
            fi
            
            # Загружаем образ из tar файла
            docker load < /tmp/discord-bot.tar
            
            # Останавливаем и удаляем старый контейнер, если он существует
            docker stop discord-bot || true
            docker rm discord-bot || true
            
            # Запускаем новый контейнер с монтированием конфигурационных файлов
            docker run -d \
              --name discord-bot \
              --restart unless-stopped \
              -v ~/discord-bot/.env:/app/.env \
              -v ~/discord-bot/config.toml:/app/config.toml \
              discord-bot:latest
            
            # Удаляем tar файл
            rm /tmp/discord-bot.tar
            
            # Удаляем неиспользуемые образы
            docker image prune -f
